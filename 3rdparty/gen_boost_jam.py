import os
import sys

def get_env_var(var_name, required=True, default_value=None):
    value = os.environ.get(var_name)
    if value is None and default_value is not None:
        value = default_value
    if required and value is None:
        print(f"Error: Neccessary environment variables '{var_name}' not set", file=sys.stderr)
        sys.exit(1)
    return value

def generate_jam_content(
    ndk_home,
    api_arm64,
    api_arm32,
    api_x86,
    api_x86_64,
    host_tag="linux-x86_64",
    clang_version_for_jam="20.0"
):
    base_toolchain_path = f"{ndk_home}/toolchains/llvm/prebuilt/{host_tag}"
    clang_c_exe = f"{base_toolchain_path}/bin/clang" 
    clang_cpp_exe = f"{base_toolchain_path}/bin/clang++" 
    llvm_ar_exe = f"{base_toolchain_path}/bin/llvm-ar"
    llvm_ranlib_exe = f"{base_toolchain_path}/bin/llvm-ranlib"
    sysroot = f"{base_toolchain_path}/sysroot"
    jam_library_name_placeholder = "$(<library-name>)"

    common_c_flags = [
        "-fPIC",
        "-O3",
        "-Wno-unused-parameter", 
        "-DANDROID",
        f"-isysroot {sysroot}"
    ]

    common_cxx_flags = [
        "-fPIC",
        "-O3",
        "-std=c++20",
        "-stdlib=libc++",
        "-Wno-unused-parameter",
        "-DANDROID",
        f"-isysroot {sysroot}"
    ]
    
    common_link_flags = [
        "-stdlib=libc++", 
        f"--sysroot={sysroot}",
        "-Wl,--no-undefined",
        "-Wl,-z,noexecstack"
    ]

    def format_c_flags(flags_list):
        return "\n".join([f'  <cflags>"{flag}"' for flag in flags_list])
    def format_cxx_flags(flags_list):
        return "\n".join([f'  <cxxflags>"{flag}"' for flag in flags_list])
    def format_link_flags(flags_list):
        return "\n".join([f'  <linkflags>"{flag}"' for flag in flags_list])

    common_c_flags_jam = format_c_flags(common_c_flags)
    common_cxx_flags_jam = format_cxx_flags(common_cxx_flags)
    common_link_flags_jam = format_link_flags(common_link_flags)

    content = f"""\
import os ;
# project-config.jam generated by Python script

# --- Toolset for Android arm64-v8a (API {api_arm64}) ---
using clang : {clang_version_for_jam.split('.')[0]}_android64 
: # Compiler executable (b2 will make the choice automatically)
  "{clang_cpp_exe}" 
: # Options
  <compiler-c>"{clang_c_exe}" 
{common_c_flags_jam}
  <cflags>"-target aarch64-none-linux-android{api_arm64}"
{common_cxx_flags_jam}
  <cxxflags>"-target aarch64-none-linux-android{api_arm64}"
  # Link Flags
  <linkflags>"-target aarch64-none-linux-android{api_arm64}"
{common_link_flags_jam}
  <linkflags>"-Wl,-soname,lib{jam_library_name_placeholder}.so"
  <archiver>"{llvm_ar_exe}" <ranlib>"{llvm_ranlib_exe}"
  <version>"{clang_version_for_jam}"
;

# --- Toolset for Android armeabi-v7a (API {api_arm32}) ---
using clang : {clang_version_for_jam.split('.')[0]}_android32
: # Compiler
  "{clang_cpp_exe}"
: # Options
  <compiler-c>"{clang_c_exe}"
{common_c_flags_jam}
  <cflags>"-target armv7a-none-linux-androideabi{api_arm32}"
  <cflags>"-march=armv7-a" <cflags>"-mfloat-abi=softfp" <cflags>"-mfpu=neon"
{common_cxx_flags_jam}
  <cxxflags>"-target armv7a-none-linux-androideabi{api_arm32}"
  <cxxflags>"-march=armv7-a" <cxxflags>"-mfloat-abi=softfp" <cxxflags>"-mfpu=neon"
  # Link Flags
  <linkflags>"-target armv7a-none-linux-androideabi{api_arm32}"
{common_link_flags_jam}
  <linkflags>"-Wl,-soname,lib{jam_library_name_placeholder}.so" <linkflags>"-Wl,--fix-cortex-a8"
  <archiver>"{llvm_ar_exe}" <ranlib>"{llvm_ranlib_exe}"
  <version>"{clang_version_for_jam}"
;

# --- Toolset for Android x86 (API {api_x86}) ---
using clang : {clang_version_for_jam.split('.')[0]}_androidx86
: # Compiler
  "{clang_cpp_exe}"
: # Options
  <compiler-c>"{clang_c_exe}"
{common_c_flags_jam}
  <cflags>"-target i686-none-linux-android{api_x86}"
  <cflags>"-march=i686"
{common_cxx_flags_jam}
  <cxxflags>"-target i686-none-linux-android{api_x86}"
  <cxxflags>"-march=i686"
  # Link Flags
  <linkflags>"-target i686-none-linux-android{api_x86}"
{common_link_flags_jam}
  <linkflags>"-Wl,-soname,lib{jam_library_name_placeholder}.so"
  <archiver>"{llvm_ar_exe}" <ranlib>"{llvm_ranlib_exe}"
  <version>"{clang_version_for_jam}"
;

# --- Toolset for Android x86_64 (API {api_x86_64}) ---
using clang : {clang_version_for_jam.split('.')[0]}_androidx86_64
: # Compiler
  "{clang_cpp_exe}"
: # Options
  <compiler-c>"{clang_c_exe}"
{common_c_flags_jam}
  <cflags>"-target x86_64-none-linux-android{api_x86_64}"
{common_cxx_flags_jam}
  <cxxflags>"-target x86_64-none-linux-android{api_x86_64}"
  # Link Flags
  <linkflags>"-target x86_64-none-linux-android{api_x86_64}"
{common_link_flags_jam}
  <linkflags>"-Wl,-soname,lib{jam_library_name_placeholder}.so"
  <archiver>"{llvm_ar_exe}" <ranlib>"{llvm_ranlib_exe}"
  <version>"{clang_version_for_jam}"
;
"""
    return content

if __name__ == "__main__":
    # Environment Variables
    ndk_home = get_env_var("ENV_ANDROID_NDK_HOME")
    api_arm64 = get_env_var("ENV_ANDROID_API_ARM64")
    api_arm32 = get_env_var("ENV_ANDROID_API_ARM32")
    api_x86 = get_env_var("ENV_ANDROID_API_X86")
    api_x86_64 = get_env_var("ENV_ANDROID_API_X86_64")
    host_tag = get_env_var("ENV_HOST_TAG", default_value="linux-x86_64")
    clang_version_for_jam = get_env_var("ENV_CLANG_VERSION_FOR_JAM", default_value="17.0")

    jam_file_content = generate_jam_content(
        ndk_home,
        api_arm64,
        api_arm32,
        api_x86,
        api_x86_64,
        host_tag,
        clang_version_for_jam
    )
    output_filename = "project-config.jam"
    try:
        with open(output_filename, "w") as f:
            f.write(jam_file_content)
        print(f"'{output_filename}' generated. ")
    except IOError as e:
        print(f"Error: Failed to write '{output_filename}': {e}", file=sys.stderr)
        sys.exit(1)