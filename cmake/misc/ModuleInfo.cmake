include_guard(GLOBAL)

include(${CMAKE_CURRENT_LIST_DIR}/PrettyPrint.cmake)

if (NOT DEFINED _MODULE_INFO_INITIALIZED)
    set(_MODULE_INFO_INITIALIZED TRUE CACHE INTERNAL "Module info system initialized")
    set(CONFIGURED_MODULES "" CACHE INTERNAL "List of configured modules")
    set(MODULE_INFO_LIST   "" CACHE INTERNAL "Detailed module information")
else()
    set(CONFIGURED_MODULES "" CACHE INTERNAL "List of configured modules")
endif()


# 用法: module_begin(<module_name>)
function(module_begin MODULE_NAME)
    set(CURRENT_MODULE_NAME ${MODULE_NAME} PARENT_SCOPE)

    string(TIMESTAMP MODULE_START_TIME "%s")
    set(MODULE_${MODULE_NAME}_START_TIME ${MODULE_START_TIME} CACHE INTERNAL "")

    pretty_message(VINFO_BANNER "Configuration ${MODULE_NAME} Module" "=" ${BANNER_WIDTH})

    pretty_message_kv(VINFO "Module" "${MODULE_NAME}")
    pretty_message_kv(VINFO "Location" "${CMAKE_CURRENT_SOURCE_DIR}")
    pretty_message_kv(VINFO "Binary Dir" "${CMAKE_CURRENT_BINARY_DIR}")
endfunction()

# 用法: module_show_files(<file_type> <file_list>)
function(module_show_files FILE_TYPE FILE_LIST)
    list(LENGTH FILE_LIST FILE_COUNT)
    
    if (FILE_COUNT GREATER 0) 
        pretty_message(VINFO "${FILE_TYPE}: ${FILE_COUNT} file(s)")
        
        pretty_message(DEBUG "${FILE_TYPE} list:")
        foreach(file ${FILE_LIST})
            get_filename_component(file_name ${file} NAME)
            get_filename_component(file_dir  ${file} DIRECTORY)
            pretty_message(DEBUG " - ${file_name}")
            pretty_message(DEBUG "   PATH: ${file_dir}")
        endforeach()
    else()
        pretty_message(WARNING "No ${FILE_TYPE} found")
    endif()
endfunction()

# 用法: module_target_info(<target_name> [SHOW_PROPERTIES]) 
function(module_target_info TARGET_NAME)
    set(options SHOW_PROPERTIES)
    cmake_parse_arguments(ARG "${options}" "" "" ${ARGN})
    
    if (NOT TARGET ${TARGET_NAME})
        pretty_message(ERROR "Target '${TARGET_NAME}' does not exist")
        return()
    endif()


    get_target_property(TARGET_TYPE            ${TARGET_NAME} TYPE)
    get_target_property(TARGET_SOURCES         ${TARGET_NAME} SOURCES)
    get_target_property(TARGET_LINK_LIBRARIES  ${TARGET_NAME} LINK_LIBRARIES)
    get_target_property(TARGET_INCLUDE_DIRS    ${TARGET_NAME} INCLUDE_DIRECTORIES)
    get_target_property(TARGET_COMPILE_DEFS    ${TARGET_NAME} COMPILE_DEFINITIONS)
    get_target_property(TARGET_COMPILE_OPTIONS ${TARGET_NAME} COMPILE_OPTIONS)

    pretty_message(INFO "Target Configuration: ")
    pretty_message(INFO "  Name: ${TARGET_NAME}")
    pretty_message(INFO "  Type: ${TARGET_TYPE}")

    if (TARGET_SOURCES)
        list(LENGTH TARGET_SOURCES SOURCE_COUNT)
        pretty_message(INFO "  Sources: ${SOURCE_COUNT} file(s)")
    endif()

    if (TARGET_INCLUDE_DIRS AND NOT TARGET_INCLUDE_DIRS STREQUAL "TARGET_INCLUDE_DIRS-NOTFOUND")
        pretty_message(INFO "  Include Directories:")
        foreach(inc_dir ${TARGET_INCLUDE_DIRS})
            pretty_message(INFO "   - ${inc_dir}")
        endforeach()
    endif()

    if (TARGET_LINK_LIBRARIES AND NOT TARGET_LINK_LIBRARIES STREQUAL "TARGET_LINK_LIBRARIES-NOTFOUND")
        pretty_message(INFO "  Link Libraries:")
        foreach(lib ${TARGET_LINK_LIBRARIES})
            pretty_message(INFO "   - ${lib}")
        endforeach()
    endif()
    
    if (TARGET_COMPILE_DEFS AND NOT TARGET_COMPILE_DEFS STREQUAL "TARGET_COMPILE_DEFS-NOTFOUND")
        pretty_message(INFO "  Compile Definitions:")
        foreach(def ${TARGET_COMPILE_DEFS})
            pretty_message(INFO "   - ${def}")
        endforeach()
    endif()

    if (TARGET_COMPILE_OPTIONS AND NOT TARGET_COMPILE_OPTIONS STREQUAL "TARGET_COMPILE_OPTIONS-NOTFOUND")
        pretty_message(INFO "  Compile Options:")
        foreach(opt ${TARGET_COMPILE_OPTIONS})
            pretty_message(INFO "   - ${opt}")
        endforeach()
    endif()

    if (ARG_SHOW_PROPERTIES)
        get_target_property(OUTPUT_NAME ${TARGET_NAME} OUTPUT_NAME)
        get_target_property(VERSION     ${TARGET_NAME} VERSION)
        get_target_property(SOVERSION   ${TARGET_NAME} SOVERSION)

        if (OUTPUT_NAME AND NOT OUTPUT_NAME STREQUAL "OUTPUT_NAME-NOTFOUND")
            pretty_message(VINFO "  Output Name: ${OUTPUT_NAME}")
        endif()

        if (VERSION AND NOT VERSION STREQUAL "VERSION-NOTFOUND")
            pretty_message(VINFO "  Version: ${VERSION}")
        endif()

        if (SOVERSION AND NOT SOVERSION STREQUAL "SOVERSION-NOTFOUND")
            pretty_message(VINFO "  So Version: ${SOVERSION}")
        endif()
    endif()
endfunction()


# 用法: module_show_dependencies(<target_name>)
function(module_show_dependencies TARGET_NAME)
    if (NOT TARGET ${TARGET_NAME})
        return()
    endif()

    get_target_property(INTERFACE_LINK_LIBRARIES ${TARGET_NAME} INTERFACE_LINK_LIBRARIES)
    get_target_property(LINK_LIBRARIES           ${TARGET_NAME} LINK_LIBRARIES)

    set(ALL_DEPS "")
    if (INTERFACE_LINK_LIBRARIES AND NOT INTERFACE_LINK_LIBRARIES STREQUAL "INTERFACE_LINK_LIBRARIES-NOTFOUND")
        list(APPEND ALL_DEPS ${INTERFACE_LINK_LIBRARIES})
    endif()
    if (LINK_LIBRARIES AND NOT LINK_LIBRARIES STREQUAL "LINK_LIBRARIES-NOTFOUND")
        list(APPEND ALL_DEPS ${LINK_LIBRARIES})
    endif()

    if (ALL_DEPS)
        list(REMOVE_DUPLICATES ALL_DEPS)
        pretty_message(INFO "Dependencies:")
        foreach(dep ${ALL_DEPS})
            if (dep MATCHES "^Qt[0-9]+::")
                pretty_message(INFO "  - ${dep} (Qt Component)")
            elseif (TARGET ${dep})
                get_target_property(dep_type ${dep} TYPE)
                pretty_message(INFO "  - ${dep} (${dep_type})")
            else()
                pretty_message(INFO "  - ${dep}")
            endif()
        endforeach()
    else()
        pretty_message(INFO "Dependencies: None")
    endif()
endfunction()

# 用法: module_end(<module_name> <target_name> [OPTIONS])
function(module_end MODULE_NAME TARGET_NAME)
    set(options SHOW_SUMMARY NO_TIMING)
    cmake_parse_arguments(ARG "${options}" "" "" ${ARGN})
    
    if (NOT ARG_NO_TIMING)
        string(TIMESTAMP MODULE_END_TIME "%s")
        math(EXPR MODULE_CONFIG_TIME "${MODULE_END_TIME} - ${MODULE_${MODULE_NAME}_START_TIME}")
        set(TIMING_INFO " (${MODULE_CONFIG_TIME}s)")
    else()
        set(TIMING_INFO "")
    endif()

    list(APPEND CONFIGURED_MODULES ${MODULE_NAME})
    set(CONFIGURED_MODULES ${CONFIGURED_MODULES} CACHE INTERNAL "List of configured modules")

    set(MODULE_INFO_${MODULE_NAME}_TARGET ${TARGET_NAME} CACHE INTERNAL "")
    set(MODULE_INFO_${MODULE_NAME}_DIR    ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL "")
    
    pretty_message(SUCCESS "${MODULE_NAME} module configured ${TIMING_INFO}")

    if (ARG_SHOW_SUMMARY AND TARGET ${TARGET_NAME})
        pretty_message(INFO "Module Summary: ")
        get_target_property(target_type ${TARGET_NAME} TYPE)
        pretty_message(INFO "  Target: ${TARGET_NAME} (${target_type})")
        
        get_target_property(install_dest ${TARGET_NAME} INSTALL_RPATH_USE_LINK_PATH)
        if (install_dest)
            pretty_message(INFO "  Will be installed: Yes")
        endif()
    endif()

    pretty_message(VINFO_LINE "=" ${BANNER_WIDTH})
    pretty_message(STATUS "")
endfunction()

# 用法: show_all_modules_summary()
function(show_all_modules_summary)

    pretty_message(IMPORTANT_LINE "=" ${BANNER_WIDTH})
    pretty_message(IMPORTANT_BANNER "Configuration done" "=" ${BANNER_WIDTH})
    pretty_message(IMPORTANT_LINE "=" ${BANNER_WIDTH})

    list(LENGTH CONFIGURED_MODULES MODULE_COUNT)
    pretty_message(INFO "Modules configured: ${MODULE_COUNT}")
    pretty_message(INFO "")
   
    pretty_message(INFO "Configured modules: ")
    foreach(module ${CONFIGURED_MODULES})
        set(target ${MODULE_INFO_${module}_TARGET})
        set(dir    ${MODULE_INFO_${module}_DIR})

        if (TARGET ${target})
            get_target_property(target_type ${target} TYPE)
            pretty_message(SUCCESS "  ✓ ${module}")
            pretty_message(INFO    "    Target: ${target} (${target_type})")
            pretty_message(INFO    "    Location: ${dir}")
        else()
            pretty_message(SUCCESS "  ✓ ${module}")
        endif()
    endforeach()
    pretty_message(STATUS_LINE "=" ${BANNER_WIDTH})
endfunction()

# 用法: check_module_dependencies(<module_name> REQUIRES dep1 dep2 ... OPTIONAL opt1 opt2 ...)
function(check_module_dependencies MODULE_NAME)
    cmake_parse_arguments(ARG "" "" "REQUIRES;OPTIONAL" ${ARGN})
    
    set(MISSING_DEPS "")
    set(FOUND_OPTIONAL "")

    if (ARG_REQUIRES)
        pretty_message(STATUS "Checking required dependencies...")
        foreach(dep ${ARG_REQUIRES})
            if (TARGET ${dep})
                pretty_message(SUCCESS " ✓ ${dep} - Found")
            else()
                pretty_message(ERROR   " ✗ ${dep} - Not Found")
                list(APPEND MISSING_DEPS ${dep})
            endif()
        endforeach()
    endif()

    if (ARG_OPTIONAL)
        pretty_message(STATUS "Checking optional dependencies...")
        foreach(dep ${ARG_OPTIONAL})
            if (TARGET ${dep})
                pretty_message(SUCCESS  "  ✓ ${dep} - Found")
                list(APPEND FOUND_OPTIONAL ${dep})
            else()
                pretty_message(OPTIONAL "  ○ ${dep} - Not Found (optional)")
            endif()
        endforeach()
    endif()

    if (MISSING_DEPS)
        pretty_message(FATAL_ERROR "${MODULE_NAME} is missing required dependencies: ${MISSING_DEPS}")
    endif()
    
    if (FOUND_OPTIONAL)
        set(${MODULE_NAME}_OPTIONAL_DEPS ${FOUND_OPTIONAL} PARENT_SCOPE)
    endif()
endfunction()

# 用法： module_feature(<module_name> <feature_name> <default_value> <description>)
function(module_feature MODULE_NAME FEATURE_NAME DEFAULT_VALUE DESCRIPTION)
    set(OPTION_NAME "${MODULE_NAME}_ENABLE_${FEATURE_NAME}")
    option(${OPTION_NAME} "${DESCRIPTION}" ${DEFAULT_VALUE})

    if (${OPTION_NAME})
        pretty_message(INFO "Feature ${FEATURE_NAME}: ENABLED")
    else()
        pretty_message(INFO "Feature ${FEATURE_NAME}: DISABLED")
    endif()

    set(${OPTION_NAME} ${${OPTION_NAME}} PARENT_SCOPE)
endfunction()
